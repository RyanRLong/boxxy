"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Element = function () {
  function Element() {
    _classCallCheck(this, Element);

    this.element = document.createElement("div");
  }

  _createClass(Element, [{
    key: "setStyles",
    value: function setStyles(styles) {
      Object.assign(this.element.style, styles);
      return this;
    }
  }, {
    key: "setAttributes",
    value: function setAttributes(attributes) {
      for (var key in attributes) {
        if (attributes.hasOwnProperty(key)) {
          this.element.setAttribute(key, attributes[key]);
        }
      }
      return this;
    }
  }, {
    key: "setClasses",
    value: function setClasses(classes) {
      var _element$classList;

      (_element$classList = this.element.classList).add.apply(_element$classList, _toConsumableArray(classes));
      return this;
    }
  }]);

  return Element;
}();;'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Box = function (_Element) {
  _inherits(Box, _Element);

  function Box(container, color) {
    _classCallCheck(this, Box);

    var _this = _possibleConstructorReturn(this, (Box.__proto__ || Object.getPrototypeOf(Box)).call(this));

    _this.container = container;
    _this.color = color;
    _this.offset = 4;
    _this.defaultStyles = {
      height: _this.height,
      width: _this.width
    };
    _this.setStyles({
      height: _this.height,
      width: _this.width
    }).setClasses(['box', _this.color, 'enter']).append();
    return _this;
  }

  _createClass(Box, [{
    key: 'append',
    value: function append() {
      this.container.element.appendChild(this.element);
    }
  }, {
    key: 'width',
    get: function get() {
      return this.container.width / this.container.boxesPerRow - this.offset + 'px';
    }
  }, {
    key: 'height',
    get: function get() {
      return (this.container.width / this.container.boxesPerRow - this.offset) * 0.75 + 'px';
    }
  }]);

  return Box;
}(Element);;"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Container = function (_Element) {
  _inherits(Container, _Element);

  function Container() {
    var boxesPerRow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
    var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "20%";

    _classCallCheck(this, Container);

    var _this = _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).call(this));

    _this.defaultStyles = {
      position: "absolute",
      top: "0px",
      right: "0px",
      height: "100%",
      opacity: 1,
      width: width
    };
    _this.defaultAttributes = {
      id: "boxxyContainer"
    };
    _this.boxesPerRow = boxesPerRow;
    _this.width = width;
    _this.setStyles(_this.defaultStyles).setAttributes(_this.defaultAttributes).append();
    return _this;
  }

  _createClass(Container, [{
    key: "append",
    value: function append() {
      document.body.appendChild(this.element);
      return this;
    }
  }, {
    key: "width",
    get: function get() {
      return this.element.offsetWidth;
    },
    set: function set(value) {
      this.element.style.width = isNaN(value) ? value : value + "px";
    }
  }]);

  return Container;
}(Element);;'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Popup = function () {
  //eslint-disable-line
  function Popup(container, text) {
    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ok";

    _classCallCheck(this, Popup);

    this.container = container;
    // this.container = document.getElementById("poppy_container") ? document.getElementById("poppy_container") : new Container();
    this.element = document.createElement('span');
    this.element.setAttribute('class', 'popup-' + type);
    this.element.textContent = text;
    this.currentTimers = [];
    this.onClick(this.deleteMe).onMouseOver(this.setPause).onMouseOut(this.setUnpause).attachCloseButton().addClass("enter").setExit(10000).setDestroy(10350).render();
    return Object.freeze(this);
  }

  _createClass(Popup, [{
    key: 'addClass',
    value: function addClass(className) {
      this.element.classList.add(className);
      return this;
    }
  }, {
    key: 'removeClass',
    value: function removeClass(className) {
      this.element.classList.remove(className);
      return this;
    }
  }, {
    key: 'onClick',
    value: function onClick(func) {
      this.element.onclick = func.bind(this);
      return this;
    }
  }, {
    key: 'onMouseOver',
    value: function onMouseOver(func) {
      this.element.onmouseover = func.bind(this);
      return this;
    }
  }, {
    key: 'onMouseOut',
    value: function onMouseOut(func) {
      this.element.onmouseout = func.bind(this);
      return this;
    }
  }, {
    key: 'setPause',
    value: function setPause() {
      this.clearAllTimers();
      this.addClass("pause");
      this.removeClass("enter");
      this.removeClass("exit");
      this.removeClass("idle");
    }
  }, {
    key: 'setUnpause',
    value: function setUnpause() {
      this.removeClass("pause");
      this.addClass("idle");
      this.setExit(10000);
      this.setDestroy(10250);
    }
  }, {
    key: 'setExit',
    value: function setExit(miliseconds) {
      var _this = this;

      var timer = setTimeout(function () {
        _this.removeClass("idle");
        _this.addClass("exit");
      }, miliseconds);
      this.currentTimers.push(timer);
      return this;
    }
  }, {
    key: 'setDestroy',
    value: function setDestroy(milliseconds) {
      var _this2 = this;

      var timer = setTimeout(function () {
        _this2.destroy();
      }, milliseconds);
      this.currentTimers.push(timer);
      return this;
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      if (this.element) {
        this.element.parentNode.removeChild(this.element);
      }
      return this;
    }
  }, {
    key: 'deleteMe',
    value: function deleteMe() {
      this.clearAllTimers();
      this.setExit(0);
      this.setDestroy(250);
    }
  }, {
    key: 'clearAllTimers',
    value: function clearAllTimers() {
      this.currentTimers.forEach(function (item) {
        clearTimeout(item);
      });
      return this;
    }
  }, {
    key: 'render',
    value: function render() {
      this.container.appendChild(this.element);
      return this;
    }
  }, {
    key: 'attachCloseButton',
    value: function attachCloseButton() {
      var closeButton = document.createElement('div');
      closeButton.setAttribute('class', 'close-thik');
      this.element.appendChild(closeButton);
      return this;
    }
  }]);

  return Popup;
}();;'use strict';

var container = new Container(10, "30%");
for (var i = 0; i < 30; i++) {
  setTimeout(function () {
    if (Math.round(Math.random(), 0) > 0) {
      new Box(container, 'green');
    } else {
      new Box(container, 'red');
    }
  }, 100 * i);
}